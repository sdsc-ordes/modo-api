modos.io
========

.. py:module:: modos.io


Attributes
----------

.. autoapisummary::

   modos.io.ext2loader


Classes
-------

.. autoapisummary::

   modos.io.MODO


Functions
---------

.. autoapisummary::

   modos.io.dict_to_instance
   modos.io.update_haspart_id
   modos.io.get_loader
   modos.io.parse_instance
   modos.io.parse_multiple_instances
   modos.io.build_modo_from_file


Module Contents
---------------

.. py:class:: MODO(path, s3_endpoint = None, s3_kwargs = None, htsget_endpoint = None, id = None, name = None, description = None, creation_date = date.today(), last_update_date = date.today(), has_assay = [], source_uri = None)

   Multi-Omics Digital Object
   A digital archive containing several multi-omics data and records.
   The archive contains:
   * A zarr file, array-based data and metadata pointing to arrays and data files
   * CRAM files, with genomic-alignments data

   .. rubric:: Examples

   >>> demo = MODO("data/ex")

   # List identifiers of samples in the archive
   >>> demo.list_samples()
   ['sample/sample1']

   # List files in the archive
   >>> files = sorted(demo.list_files())
   >>> assert Path('data/ex/demo1.cram') in files
   >>> assert Path('data/ex/reference1.fa') in files


   .. py:property:: zarr
      :type: zarr.hierarchy.Group



   .. py:property:: path
      :type: pathlib.Path



   .. py:property:: metadata
      :type: dict



   .. py:method:: knowledge_graph(uri_prefix = None)

      Return an RDF graph of the metadata. All identifiers
      are converted to valid URIs if needed.



   .. py:method:: show_contents()

      human-readable print of the object's contents



   .. py:method:: list_files()

      Lists files in the archive recursively (except for the zarr file).



   .. py:method:: list_arrays()

      Lists arrays in the archive recursively.



   .. py:method:: query(query)

      Use SPARQL to query the metadata graph



   .. py:method:: list_samples()

      Lists samples in the archive.



   .. py:method:: update_date(date = date.today())

      update last_update_date attribute



   .. py:method:: remove_element(element_id)

      Remove an element from the archive, along with any files
      directly attached to it and links from other elements to it.



   .. py:method:: add_element(element, data_file = None, part_of = None)

      Add an element to the archive.
      If a data file is provided, it will be added to the archive.
      If the element is part of another element, the parent metadata
      will be updated.

      :param element: Element to add to the archive.
      :param data_file: File to associate with the element.
      :param part_of: Id of the parent element. It must be scoped to the type.
                      For example "sample/foo".



   .. py:method:: _add_any_element(element, data_file = None, part_of = None)

      Add an element of any type to the storage.



   .. py:method:: update_element(element_id, new)

      Update element metadata in place by adding new values from model object.

      :param element_id: Full id path in the zarr store.
      :param new: Element containing the enriched metadata.



   .. py:method:: enrich_metadata()

      Add metadata and corresponding elements extracted from object associated data to the MODO object



   .. py:method:: stream_genomics(file_path, region = None, reference_filename = None, output_filename = None)

      Slices both local and remote CRAM, VCF (.vcf.gz), and BCF
      files returning an iterator or saving to local file.



.. py:function:: dict_to_instance(element)

.. py:function:: update_haspart_id(element)

   update the id of the has_part property of an element to use the full id including its type


.. py:data:: ext2loader

.. py:function:: get_loader(path)

   Get a loader based on the file extension using regex.


.. py:function:: parse_instance(path, target_class)

   Load a model of target_class from a file.


.. py:function:: parse_multiple_instances(path)

   Load one or more model from file. Model types must be specified as @type


.. py:function:: build_modo_from_file(path, object_directory, s3_endpoint = None, s3_kwargs = None, htsget_endpoint = None)

   build a modo from a yaml or json file


