modos.helpers
=============

.. py:module:: modos.helpers


Classes
-------

.. autoapisummary::

   modos.helpers.UserElementType
   modos.helpers.ElementType
   modos.helpers.GenomicFileSuffix


Functions
---------

.. autoapisummary::

   modos.helpers.get_haspart_property
   modos.helpers.get_slot_range
   modos.helpers.load_schema
   modos.helpers.class_from_name
   modos.helpers.dict_to_instance
   modos.helpers.is_full_id
   modos.helpers.set_haspart_relationship
   modos.helpers.update_haspart_id
   modos.helpers.is_uri
   modos.helpers.parse_region
   modos.helpers.file_to_pysam_object
   modos.helpers.bytesio_to_iterator
   modos.helpers.iter_to_file


Module Contents
---------------

.. py:function:: get_haspart_property(child_class)

   Return the name of the "has_part" property for a target class.
   If no such property is in the schema, return None.

   .. rubric:: Examples

   >>> get_haspart_property('AlignmentSet')
   'has_data'
   >>> get_haspart_property('Assay')
   'has_assay'


.. py:function:: get_slot_range(slot_name)

   Return the class-independent range of a slot.


.. py:function:: load_schema()

   Return a view over the schema structure.


.. py:function:: class_from_name(name)

.. py:function:: dict_to_instance(element)

.. py:function:: is_full_id(element_id)

   Checks if an element_id contains the element type as prefix.

   .. rubric:: Examples

   >>> is_full_id("sample1")
   False
   >>> is_full_id("data/test")
   True
   >>> is_full_id("/assay/test_assay")
   True


.. py:function:: set_haspart_relationship(child_class, child_path, parent_group)

   Add element to the hasPart attribute of a parent zarr group


.. py:function:: update_haspart_id(element)

   update the id of the has_part property of an element to use the full id including its type


.. py:class:: UserElementType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Enumeration of element types exposed to the user.


   .. py:attribute:: SAMPLE
      :value: 'sample'



   .. py:attribute:: ASSAY
      :value: 'assay'



   .. py:attribute:: DATA_ENTITY
      :value: 'data'



   .. py:attribute:: REFERENCE_GENOME
      :value: 'reference'



   .. py:method:: get_target_class()

      Return the target class for the element type.



   .. py:method:: from_object(obj)
      :classmethod:


      Return the element type from an object.



.. py:class:: ElementType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Enumeration of all element types.


   .. py:attribute:: SAMPLE
      :value: 'sample'



   .. py:attribute:: ASSAY
      :value: 'assay'



   .. py:attribute:: DATA_ENTITY
      :value: 'data'



   .. py:attribute:: REFERENCE_GENOME
      :value: 'reference'



   .. py:attribute:: REFERENCE_SEQUENCE
      :value: 'sequence'



   .. py:method:: get_target_class()

      Return the target class for the element type.



   .. py:method:: from_object(obj)
      :classmethod:


      Return the element type from an object.



   .. py:method:: from_model_name(name)
      :classmethod:


      Return the element type from an object name.



.. py:function:: is_uri(text)

   Checks if input is a valid URI.


.. py:function:: parse_region(region = None)

   Parses an input UCSC-format region string into
   (reference_name, start, end).

   .. rubric:: Examples

   >>> parse_region('chr1:10-320')
   ('chr1', 10, 320)
   >>> parse_region('chr-1ba:10-320')
   ('chr-1ba', 10, 320)
   >>> parse_region('chr1:-320')
   ('chr1', None, 320)
   >>> parse_region('chr1:10-')
   ('chr1', 10, None)
   >>> parse_region('chr1:10')
   ('chr1', 10, None)
   >>> parse_region('chr1')
   ('chr1', None, None)
   >>> parse_region('*')
   ('*', None, None)
   >>> parse_region('')
   (None, None, None)


.. py:class:: GenomicFileSuffix

   Bases: :py:obj:`tuple`, :py:obj:`enum.Enum`


   Enumeration of all supported genomic file suffixes.


   .. py:attribute:: CRAM
      :value: ('.cram',)



   .. py:attribute:: FASTA
      :value: ('.fasta', '.fa')



   .. py:attribute:: FASTQ
      :value: ('.fastq', '.fq')



   .. py:attribute:: BAM
      :value: ('.bam',)



   .. py:attribute:: SAM
      :value: ('.sam',)



   .. py:attribute:: VCF
      :value: ('.vcf', '.vcf.gz')



   .. py:attribute:: BCF
      :value: ('.bcf',)



   .. py:method:: from_path(path)
      :classmethod:



   .. py:method:: get_index_suffix()

      Return the supported index suffix related to a genomic filetype



.. py:function:: file_to_pysam_object(path, fileformat, reference_filename = None)

   Create a pysam AlignmentFile of VariantFile


.. py:function:: bytesio_to_iterator(bytesio_buffer, file_format, region, reference_filename = None)

   Takes a BytesIO buffer and returns a pysam
   AlignedSegment or VariantRecord iterator


.. py:function:: iter_to_file(gen_iter, infile, output_filename, reference_filename = None)

